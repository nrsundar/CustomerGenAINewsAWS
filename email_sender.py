"""
Email notification module for GenAI Content Monitor
Handles SMTP email sending with formatted content
"""

import smtplib
import logging
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.utils import formatdate
from typing import List, Dict
from datetime import datetime

logger = logging.getLogger(__name__)

class EmailSender:
    """Email sender for notifications"""
    
    def __init__(self, config):
        self.config = config
    
    def _create_email_content(self, articles: List[Dict]) -> tuple:
        """Create HTML and plain text email content"""
        
        # Create HTML content
        html_content = f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <style>
                body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f5f5f5; }}
                .container {{ max-width: 800px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }}
                .header {{ background-color: #2c3e50; color: white; padding: 20px; margin: -20px -20px 20px -20px; border-radius: 8px 8px 0 0; }}
                .header h1 {{ margin: 0; font-size: 24px; }}
                .article {{ border-left: 4px solid #3498db; padding-left: 15px; margin: 20px 0; background-color: #f8f9fa; padding: 15px; border-radius: 0 5px 5px 0; }}
                .article-title {{ font-size: 18px; font-weight: bold; color: #2c3e50; margin-bottom: 10px; }}
                .article-title a {{ color: #3498db; text-decoration: none; }}
                .article-title a:hover {{ text-decoration: underline; }}
                .article-summary {{ color: #555; line-height: 1.6; margin-bottom: 10px; }}
                .article-meta {{ color: #888; font-size: 12px; }}
                .footer {{ margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #888; font-size: 12px; }}
                .stats {{ background-color: #ecf0f1; padding: 10px; border-radius: 5px; margin-bottom: 20px; }}
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>ðŸ¤– GenAI Content Monitor</h1>
                    <p>New Generative AI Articles Detected</p>
                </div>
                
                <div class="stats">
                    <strong>ðŸ“Š Summary:</strong> {len(articles)} new GenAI-related articles found<br>
                    <strong>ðŸ“… Date:</strong> {datetime.now().strftime('%B %d, %Y at %I:%M %p')}
                </div>
        """
        
        # Add each article
        for i, article in enumerate(articles, 1):
            html_content += f"""
                <div class="article">
                    <div class="article-title">
                        <a href="{article['url']}" target="_blank">{i}. {article['title']}</a>
                    </div>
                    <div class="article-summary">
                        {article.get('summary', 'No summary available')}
                    </div>
                    <div class="article-meta">
                        Source: {article.get('source_url', 'Unknown')} | 
                        <a href="{article['url']}" target="_blank">Read Full Article</a>
                    </div>
                </div>
            """
        
        html_content += """
                <div class="footer">
                    <p>This email was automatically generated by GenAI Content Monitor.</p>
                    <p>Stay updated with the latest in Generative AI technology!</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        # Create plain text content
        text_content = f"""
GenAI Content Monitor - New Articles Detected

ðŸ“Š Summary: {len(articles)} new GenAI-related articles found
ðŸ“… Date: {datetime.now().strftime('%B %d, %Y at %I:%M %p')}

=== NEW ARTICLES ===

"""
        
        for i, article in enumerate(articles, 1):
            text_content += f"""
{i}. {article['title']}
   URL: {article['url']}
   Summary: {article.get('summary', 'No summary available')}
   Source: {article.get('source_url', 'Unknown')}
   
"""
        
        text_content += """
---
This email was automatically generated by GenAI Content Monitor.
Stay updated with the latest in Generative AI technology!
"""
        
        return html_content, text_content
    
    def send_notification(self, articles: List[Dict]) -> bool:
        """Send email notification with new articles"""
        
        if not articles:
            logger.info("No articles to send")
            return True
        
        try:
            # Create email content
            html_content, text_content = self._create_email_content(articles)
            
            # Create message
            msg = MIMEMultipart('alternative')
            msg['Subject'] = f"ðŸ¤– GenAI Monitor: {len(articles)} New Articles Found"
            msg['From'] = self.config.EMAIL_SENDER
            msg['To'] = self.config.EMAIL_RECIPIENT
            msg['Date'] = formatdate(localtime=True)
            
            # Attach text and HTML parts
            text_part = MIMEText(text_content, 'plain', 'utf-8')
            html_part = MIMEText(html_content, 'html', 'utf-8')
            
            msg.attach(text_part)
            msg.attach(html_part)
            
            # Send email
            logger.info(f"Connecting to SMTP server: {self.config.EMAIL_SMTP_SERVER}:{self.config.EMAIL_SMTP_PORT}")
            
            with smtplib.SMTP(self.config.EMAIL_SMTP_SERVER, self.config.EMAIL_SMTP_PORT) as server:
                server.starttls()
                server.login(self.config.EMAIL_USERNAME, self.config.EMAIL_PASSWORD)
                
                text = msg.as_string()
                server.sendmail(self.config.EMAIL_SENDER, [self.config.EMAIL_RECIPIENT], text)
            
            logger.info(f"Email sent successfully to {self.config.EMAIL_RECIPIENT}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to send email: {e}")
            return False
    
    def send_test_email(self) -> bool:
        """Send a test email to verify configuration"""
        try:
            test_articles = [{
                'title': 'Test Article: GenAI Content Monitor Setup',
                'url': 'https://example.com/test',
                'summary': 'This is a test email to verify that your GenAI Content Monitor is configured correctly and can send email notifications.',
                'source_url': 'https://example.com'
            }]
            
            return self.send_notification(test_articles)
            
        except Exception as e:
            logger.error(f"Failed to send test email: {e}")
            return False
