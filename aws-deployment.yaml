AWSTemplateFormatVersion: '2010-09-09'
Description: 'GenAI Content Monitor - Serverless Architecture with RDS PostgreSQL'

Parameters:
  OpenAIAPIKey:
    Type: String
    Description: OpenAI API Key for content analysis
    NoEcho: true
  
  AdminUsername:
    Type: String
    Default: admin
    Description: Admin panel username
  
  AdminPassword:
    Type: String
    Default: genai2025
    NoEcho: true
    Description: Admin panel password
    
  DBUsername:
    Type: String
    Default: genaiuser
    Description: Database username
    
  DBPassword:
    Type: String
    NoEcho: true
    Description: Database password (minimum 8 characters)
    MinLength: 8

Resources:
  # VPC for RDS
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: GenAI-Monitor-VPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: GenAI-Monitor-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets for NAT Gateways
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: GenAI-Monitor-Public-Subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: GenAI-Monitor-Public-Subnet-2

  # Private Subnets for RDS
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: GenAI-Monitor-Private-Subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: GenAI-Monitor-Private-Subnet-2

  # NAT Gateways
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: GenAI-Monitor-Public-Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: GenAI-Monitor-Private-Routes-AZ1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: GenAI-Monitor-Private-Routes-AZ2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # Security Groups
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for GenAI Monitor RDS
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: GenAI-Monitor-DB-SubnetGroup

  # RDS PostgreSQL Database
  GenAIDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: genai-monitor-db
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '15.4'
      AllocatedStorage: 20
      StorageType: gp2
      DBName: genaimonitor
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      BackupRetentionPeriod: 7
      MultiAZ: false
      PubliclyAccessible: false
      StorageEncrypted: true
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: GenAI-Monitor-Database

  # Secrets Manager for API Keys
  OpenAISecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: GenAI-Monitor-OpenAI-Key
      Description: OpenAI API Key for GenAI Content Analysis
      SecretString: !Sub |
        {
          "openai_api_key": "${OpenAIAPIKey}",
          "admin_username": "${AdminUsername}",
          "admin_password": "${AdminPassword}"
        }

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: GenAI-Monitor-DB-Credentials
      Description: Database credentials for GenAI Monitor
      SecretString: !Sub |
        {
          "username": "${DBUsername}",
          "password": "${DBPassword}",
          "host": "${GenAIDatabase.Endpoint.Address}",
          "port": "5432",
          "dbname": "genaimonitor"
        }

  # S3 Bucket for Dashboard Hosting
  DashboardBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'genai-monitor-dashboard-${AWS::AccountId}-${AWS::Region}'
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # S3 Bucket Policy for Public Read Access
  DashboardBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DashboardBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub '${DashboardBucket}/*'

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: GenAIMonitorLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref OpenAISecret
                  - !Ref DBSecret
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${DashboardBucket}/*'
              - Effect: Allow
                Action:
                  - s3:ListBucket
                Resource:
                  - !Ref DashboardBucket

  # Lambda Layer for Dependencies
  DependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: GenAI-Monitor-Dependencies
      Description: Python dependencies for GenAI Monitor
      Content:
        ZipFile: |
          # This will be replaced with actual dependencies
          # requests, psycopg2, beautifulsoup4, trafilatura, openai
      CompatibleRuntimes:
        - python3.11

  # Lambda Function for Monitoring
  MonitoringLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GenAI-Monitor-Collector
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 900
      MemorySize: 512
      Layers:
        - !Ref DependenciesLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DB_SECRET_NAME: !Ref DBSecret
          OPENAI_SECRET_NAME: !Ref OpenAISecret
          DASHBOARD_BUCKET: !Ref DashboardBucket
      Code:
        ZipFile: |
          import json
          import boto3
          import psycopg2
          import requests
          import os
          from datetime import datetime
          
          def lambda_handler(event, context):
              # This will contain your monitoring logic
              print("GenAI Monitoring Lambda executed")
              
              # Get secrets
              secrets_client = boto3.client('secretsmanager')
              
              # Get database credentials
              db_secret = secrets_client.get_secret_value(
                  SecretId=os.environ['DB_SECRET_NAME']
              )
              db_creds = json.loads(db_secret['SecretString'])
              
              # Get OpenAI API key
              openai_secret = secrets_client.get_secret_value(
                  SecretId=os.environ['OPENAI_SECRET_NAME']
              )
              openai_creds = json.loads(openai_secret['SecretString'])
              
              return {
                  'statusCode': 200,
                  'body': json.dumps('Monitoring completed successfully')
              }

  # Lambda Function for Web Dashboard
  DashboardLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: GenAI-Monitor-Dashboard
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 256
      Layers:
        - !Ref DependenciesLayer
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Environment:
        Variables:
          DB_SECRET_NAME: !Ref DBSecret
          OPENAI_SECRET_NAME: !Ref OpenAISecret
          DASHBOARD_BUCKET: !Ref DashboardBucket
      Code:
        ZipFile: |
          import json
          import boto3
          import psycopg2
          import os
          
          def lambda_handler(event, context):
              # This will serve your dashboard
              print("Dashboard Lambda executed")
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'text/html'
                  },
                  'body': '''
                  <!DOCTYPE html>
                  <html>
                  <head><title>GenAI Monitor</title></head>
                  <body>
                      <h1>GenAI Content Monitor</h1>
                      <p>Dashboard is being configured...</p>
                  </body>
                  </html>
                  '''
              }

  # EventBridge Rule for Daily Monitoring
  MonitoringSchedule:
    Type: AWS::Events::Rule
    Properties:
      Description: Daily GenAI content monitoring
      ScheduleExpression: 'cron(0 8 * * ? *)'  # 8 AM UTC daily
      State: ENABLED
      Targets:
        - Arn: !GetAtt MonitoringLambda.Arn
          Id: GenAIMonitoringTarget

  # Permission for EventBridge to invoke Lambda
  MonitoringLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MonitoringLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt MonitoringSchedule.Arn

  # API Gateway for Dashboard Access
  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: GenAI-Monitor-API
      Description: API Gateway for GenAI Monitor Dashboard
      EndpointConfiguration:
        Types:
          - REGIONAL

  APIGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - APIGatewayMethodGET
      - APIGatewayMethodPOST
    Properties:
      RestApiId: !Ref APIGateway
      StageName: prod

  APIGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref APIGateway

  APIGatewayMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref APIGatewayResource
      RestApiId: !Ref APIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardLambda.Arn}/invocations'

  APIGatewayMethodPOST:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: POST
      ResourceId: !Ref APIGatewayResource
      RestApiId: !Ref APIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardLambda.Arn}/invocations'

  APIGatewayRootMethodGET:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !GetAtt APIGateway.RootResourceId
      RestApiId: !Ref APIGateway
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DashboardLambda.Arn}/invocations'

  # Lambda Permission for API Gateway
  DashboardLambdaAPIPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref DashboardLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub '${APIGateway}/*/*'

  # CloudFront Distribution for Global Access
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: GenAI Monitor Dashboard CDN
        DefaultRootObject: index.html
        Origins:
          - Id: APIGatewayOrigin
            DomainName: !Sub '${APIGateway}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: /prod
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          TargetOriginId: APIGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: true
            Headers:
              - Authorization
              - Content-Type
        PriceClass: PriceClass_100

Outputs:
  DatabaseEndpoint:
    Description: RDS PostgreSQL Database Endpoint
    Value: !GetAtt GenAIDatabase.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'

  APIGatewayURL:
    Description: API Gateway URL for Dashboard Access
    Value: !Sub 'https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export:
      Name: !Sub '${AWS::StackName}-APIGatewayURL'

  CloudFrontURL:
    Description: CloudFront Distribution URL (Global Access)
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontURL'

  DashboardBucketName:
    Description: S3 Bucket for Dashboard Assets
    Value: !Ref DashboardBucket
    Export:
      Name: !Sub '${AWS::StackName}-DashboardBucket'

  MonitoringLambdaArn:
    Description: Monitoring Lambda Function ARN
    Value: !GetAtt MonitoringLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-MonitoringLambda'

  DashboardLambdaArn:
    Description: Dashboard Lambda Function ARN
    Value: !GetAtt DashboardLambda.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DashboardLambda'